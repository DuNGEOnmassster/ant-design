"use strict";

var _commander = _interopRequireDefault(require("commander"));

var _chalk = _interopRequireDefault(require("chalk"));

var _updateNotifier = _interopRequireDefault(require("update-notifier"));

var _errorReporter = _interopRequireWildcard(require("./errorReporter"));

var _package = _interopRequireDefault(require("../package.json"));

var _upload = _interopRequireWildcard(require("./upload"));

var _cancel = _interopRequireWildcard(require("./cancel"));

var _display = require("./display");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

(0, _updateNotifier.default)({
  pkg: _package.default
}).notify();
(0, _errorReporter.initializeErrorReporter)();

if (process.env.NODE_ENV !== 'production') {
  process.on('exit', code => {
    console.info(`exit code: ${code}`);
  });
}

const list = value => value.split(',');

_commander.default.version(_package.default.version);

_commander.default.command('upload <directory>').description('Upload screenshots').option('-T, --token <token>', 'Repository token').option('-C, --commit <commit>', 'Git commit').option('-B, --branch <branch>', 'Git branch').option('--external-build-id [string]', 'ID of the build (batch mode only)').option('--batchCount [int]', 'Number of batches expected (batch mode)', parseInt).option('--build-name [string]', 'Name of the build').option('--ignore <list>', 'List of glob files to ignore (ex: "**/*.png,**/diff.jpg")', list).action(async (directory, command) => {
  console.log(`=== argos-cli: uploading '${directory}' directory...\n`);
  let json;

  try {
    const res = await (0, _upload.default)(_objectSpread({
      directory
    }, command));
    const text = await res.text();

    try {
      json = JSON.parse(text);
    } catch (error) {
      throw new Error(`${res.status}: Failed to parse response body as JSON:\n\n${text}`);
    }

    if (json.error) {
      throw new _upload.UploadError(json.error.message);
    }
  } catch (error) {
    (0, _display.displayError)('Sorry an error happened:');

    if (error instanceof _upload.UploadError) {
      console.error(_chalk.default.bold.red(error.message));
    } else {
      _errorReporter.default.captureException(error);

      console.error(_chalk.default.bold.red(error.message));
      console.error(_chalk.default.bold.red(error.stack));
    }

    process.exit(1);
  }

  (0, _display.displaySuccess)('Upload complete!');
  console.log(_chalk.default.green(`build id: ${json.build.id}`));
  console.log(_chalk.default.green(`build url: ${json.build.buildUrl}`));
});

_commander.default.command('cancel').description('Cancel the build (batch mode only)').option('-T, --token <token>', 'Repository token').option('--external-build-id [string]', 'ID of the build (batch mode only)').action(async command => {
  console.log(`=== argos-cli: canceling build`);
  let json;

  try {
    const res = await (0, _cancel.default)(_objectSpread({}, command));
    const text = await res.text();

    try {
      json = JSON.parse(text);
    } catch (error) {
      throw new Error(`${res.status}: Failed to parse response body as JSON:\n\n${text}`);
    }

    if (json.error) {
      throw new _cancel.CancelError(json.error.message);
    }
  } catch (error) {
    (0, _display.displayError)('Sorry an error happened:');

    if (error instanceof _cancel.CancelError) {
      console.error(_chalk.default.bold.red(error.message));
    } else {
      _errorReporter.default.captureException(error);

      console.error(_chalk.default.bold.red(error.message));
      console.error(_chalk.default.bold.red(error.stack));
    }

    process.exit(1);
  }

  (0, _display.displaySuccess)('Build canceled.');
});

if (!process.argv.slice(2).length) {
  _commander.default.outputHelp();
} else {
  _commander.default.parse(process.argv);
}