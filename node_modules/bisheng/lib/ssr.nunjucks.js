"use strict";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

require('@babel/polyfill');

var React = require('react');

var ReactDOMServer = require('react-dom/server');

var ReactRouter = require('react-router');

var DocumentTitle = require('react-document-title');

var _require = require('react-helmet'),
    Helmet = _require.Helmet;

var _createElement = require('../lib/utils/create-element');

var data = require('../lib/utils/ssr-data.js');

var routes = require('{{ routesPath }}')(data);

module.exports = function ssr(url, callback) {
  ReactRouter.match({
    routes: routes,
    location: url
  }, function (error, redirectLocation, renderProps) {
    if (error) {
      callback(error, '');
    } else if (redirectLocation) {
      callback(null, ''); // TODO
    } else if (renderProps) {
      var helmetContext = {};

      try {
        var content = ReactDOMServer.renderToString( /*#__PURE__*/React.createElement(ReactRouter.RouterContext, _extends({}, renderProps, {
          createElement: function createElement(Component, props) {
            return _createElement(Component, _objectSpread(_objectSpread({}, props), {}, {
              helmetContext: helmetContext
            }));
          }
        })));
        var helmet = helmetContext.helmet || Helmet.renderStatic();
        var documentTitle = DocumentTitle.rewind();
        var helmetTitleTmp = helmet.title.toString();
        var htmlAttributes = helmet.htmlAttributes.toString();
        var meta = helmet.meta.toString();
        var link = helmet.link.toString();
        var helmentTitle = helmetTitleTmp.match(/<title.*>([^<]+)<\/title>/) ? helmetTitleTmp.match(/<title.*>([^<]+)<\/title>/)[1] : ''; // 兼容 DocumentTitle ，推荐使用 react-helmet

        var title = documentTitle || helmentTitle; // params for extension

        callback(null, content, {
          title: title,
          meta: meta,
          link: link,
          htmlAttributes: htmlAttributes
        });
      } catch (e) {
        callback(e, '');
      }
    } else {
      callback(null, ''); // TODO
    }
  });
};